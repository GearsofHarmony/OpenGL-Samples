#version 330 core
out vec4 FragColor;

struct Material
{
	vec3 specular;
	sampler2D diffuse;
	//sampler2D specular;
	float shininess;
};

struct Light
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct DirLight
{
	vec3 direction;

	Light light;
};

struct PointLight
{
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	Light light;
};

struct SpotLight
{
	vec3 position;
	vec3 direction;

	float cutOff;
	float outerCutOff;

	float constant;
	float linear;
	float quadratic;

	Light light;
};

//in vec3 ourColor;
in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;

uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLight;
uniform SpotLight spotLight;
uniform vec3 viewPos;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos);

void main()
{
	vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result = CalcDirLight(dirLight, Normal, viewDir);// + CalcPointLight(pointLight, Normal, viewDir, FragPos) + CalcSpotLight(spotLight, Normal, viewDir, FragPos);
	result += CalcPointLight(pointLight, Normal, viewDir, FragPos);
	result += CalcSpotLight(spotLight, Normal, viewDir, FragPos);
	result = pow(result, vec3(1.0/2.2));

	FragColor = vec4(result,1.0);
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDir = normalize(-light.direction);
	// diffuse
	float diff = max(dot(normal, lightDir), 0.0);
	// specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	// combine results
	vec3 ambient = light.light.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 diffuse = light.light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
	vec3 specular = light.light.specular * spec * vec3(material.specular);
	return (ambient + diffuse + specular);
};

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
	vec3 lightDir = normalize(light.position - fragPos);
	// diffuse
	float diff = max(dot(normal, lightDir), 0.0);
	// specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	// attenuation
	float distance = length(light.position - FragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	// combine results
	vec3 ambient = light.light.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 diffuse = light.light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
	vec3 specular = light.light.specular * spec * vec3(material.specular);
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
};

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
	vec3 lightDir = normalize(light.position - fragPos);
	// diffuse
	float diff = max(dot(normal, lightDir), 0.0);
	// specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	// attenuation
	float distance = length(light.position - FragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	// intensity
	float theta = dot(lightDir, normalize(-light.direction)); 
	float epsilon = (light.cutOff - light.outerCutOff);
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	// combine results
	vec3 ambient = light.light.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 diffuse = light.light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
	vec3 specular = light.light.specular * spec * vec3(material.specular);
	ambient *= intensity;
	diffuse *= attenuation * intensity;
	specular *= attenuation * intensity;
	return (ambient + diffuse + specular);
};